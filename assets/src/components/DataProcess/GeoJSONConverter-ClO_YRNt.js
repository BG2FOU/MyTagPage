import{u as m}from"../MapboxPanel/stores/deviceStore-C0BIN_ip.js";import{r as _,b as S,w as h}from"../../../vendor-UN2rW63P.js";const v={__name:"GeoJSONConverter",props:{data:{type:Object,required:!0,default:{}}},setup(d,{expose:p}){const u=m(),l=d,s=_({}),n=e=>{if(Object.keys(e).length>0){const a=e.data,i=[...a].sort((t,o)=>new Date(t.isodatetime)-new Date(o.isodatetime)),f=i.map(t=>({type:"Feature",properties:{name:t.id_short,id:t.id_short,conf:t.conf,Status:t.status,TimeStamp:t.isodatetime,statusCode:t.statusCode},geometry:{type:"Point",coordinates:[t.longitude,t.latitude]}})),c=new Map,g=new Set([...a].map(t=>t.id_short));for(const t of g){const o=i.filter(r=>r.id_short==t).map(r=>[r.longitude,r.latitude]);o.length>1&&c.set(t,o)}const y=Array.from(c,([t,o])=>({type:"Feature",properties:{id:t},geometry:{type:"LineString",coordinates:o,direction:"forward","arrow-symbol":"triangle"}}));s.value={type:"FeatureCollection",features:[...f,...y]}}};return S(()=>{u.readLocalstorage(),h(()=>l.data,e=>{Object.keys(e).length>0&&n(e)},{immediate:!0})}),p({convertToGeoJson:n,geoJsonData:s}),(e,a)=>null}};export{v as _};
